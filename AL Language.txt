// Welcome to your new AL extension.
// Remember that object names and IDs should be unique across all extensions.
// AL snippets start with t*, like tpageext - give them a try and happy coding!

namespace DefaultPublisher.AddressAPI;
// Welcome to your new AL extension. 
// Remember that object names and IDs should be unique across all extensions. 
// AL snippets start with t*, like tpageext - give them a try and happy coding! 
using Microsoft.Sales.Customer;
using System.Security.Authentication;
using Microsoft.Sales.History;
using System.Environment;
using Microsoft.Integration.Dataverse;
using Microsoft.Foundation.Company;
using Microsoft.Sales.Document;
using Microsoft.Sales.Posting;


codeunit 50113 CRMIntegration
{

    var
        TenantId: Text;
        ClientId: Text;
        ClientSecret: Text;
        Scope: Text;
        TokenEndpoint: Text;
        AccessToken: Text;

    // Define a method to get the access token
    procedure GetAccessToken(): Text;
    var
        HttpClient: HttpClient;
        HttpContent: HttpContent;
        HttpResponseMessage: HttpResponseMessage;
        HttpHeaders: HttpHeaders;
        ResponseText: Text;
        JsonObject: JsonObject;
        JsonToken: JsonToken;
        AccessToken: Text;
        Body: Text;
    begin

        TenantId := 'TenantId';
        ClientId := 'ClientId';
        ClientSecret := 'ClientSecret';
        Scope := 'https://Your-Org.crm3.dynamics.com/.default';
        TokenEndpoint := 'https://login.microsoftonline.com/' + TenantId + '/oauth2/v2.0/token';

        // Construct the body of the request
        Body := 'grant_type=client_credentials' +
                '&client_id=' + ClientId +
                '&client_secret=' + ClientSecret +
                '&scope=' + Scope;

        // Create the content for the request
        HttpContent.WriteFrom(Body);

        // Get headers and set content type
        HttpContent.GetHeaders(HttpHeaders);
        HttpHeaders.Clear();
        HttpHeaders.Add('Content-Type', 'application/x-www-form-urlencoded');

        // Send the HTTP POST request
        if HttpClient.Post(TokenEndpoint, HttpContent, HttpResponseMessage) then begin
            // Read the response
            HttpResponseMessage.Content().ReadAs(ResponseText);
            JsonObject.ReadFrom(ResponseText);


            // Parse the access token
            if JsonObject.Get('access_token', JsonToken) then begin
                AccessToken := JsonToken.AsValue().AsText();
            end
            else begin
                Error('Access token not found in the response.');
            end;

            // Return the access token
            exit(AccessToken);
        end else begin
            Error('Failed to get access token. HTTP status: %1', HttpResponseMessage.HttpStatusCode());
        end;
    end;
}